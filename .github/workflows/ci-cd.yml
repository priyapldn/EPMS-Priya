name: CI/CD Pipeline for Flask App

on:
  push:
    branches:
      - dev
      - staging
      - main  # Change if using 'prod' as production branch

permissions:
  contents: read

jobs:
  test:
    name: Run Tests & Linting
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10"]  # Test on multiple Python versions
    
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }} 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with Flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Unit Tests with Coverage
        run: |
          pytest --cov=app --cov-report=xml

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # zap_scan:
  #   runs-on: ubuntu-latest
  #   name: Scan the web application
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.ref }}

  #     - name: Run OWASP ZAP Scan
  #       uses: zaproxy/action-full-scan@v0.12.0
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for authentication
  #         docker_name: 'ghcr.io/zaproxy/zaproxy:stable'  # Docker image to run ZAP
  #         target: 'https://epms-sedo-staging.onrender.com'
  #         # rules_file_name: '.zap/rules.tsv'  # Path to custom ZAP rules, if any (optional)
  #         # cmd_options: '-a'  # Additional options for the scan (optional)

  #     - name: Upload ZAP Report (Optional)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: zap-report
  #         path: ./zap-report/*.html

  zap_scan:
    runs-on: ubuntu-latest
    name: Scan the web application
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'https://epms-sedo-staging.onrender.com'
          # rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP Reports (HTML, JSON, XML)
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: ./zap-report/*

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test  # Ensures deployment only happens if tests pass

    steps:
      - name: Deploy to Render (Dev)
        if: github.ref == 'refs/heads/dev'
        run: |
          curl -X POST "https://api.render.com/deploy/srv-cuu79md6l47c73acq180?key=${{ secrets.RENDER_API_KEY }}"

      - name: Deploy to Render (Staging)
        if: github.ref == 'refs/heads/staging'
        run: |
          curl -X POST "https://api.render.com/deploy/srv-cuu7a3a3esus73eghor0?key=${{ secrets.RENDER_API_KEY }}"

      - name: Deploy to Render (Prod)
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X POST "https://api.render.com/deploy/srv-cuu7agi3esus73eghtdg?key=${{ secrets.RENDER_API_KEY }}"