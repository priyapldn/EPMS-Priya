# # This workflow will install Python dependencies, run tests and lint with a single version of Python
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

# name: Python application

# on:
#   push:
#     branches: [ "main" ]

# permissions:
#   contents: read

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4
#     - name: Set up Python 3.10
#       uses: actions/setup-python@v3
#       with:
#         python-version: "3.10"
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install flake8 pytest
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#     - name: Lint with flake8
#       run: |
#         # stop the build if there are Python syntax errors or undefined names
#         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#     # - name: Test with pytest
#     #   run: |
#     #     pytest


name: CI/CD Pipeline for Flask App

on:
  push:
    branches:
      - dev
      - staging
      - main  # Change if using 'prod' as production branch

permissions:
  contents: read

jobs:
  test:
    name: Run Tests & Linting
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10"]  # Test on multiple Python versions
    
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }} 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with Flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Unit Tests with Coverage
        run: |
          pytest --cov=app --cov-report=xml

      - name: Upload Coverage Report (optional)
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test  # Ensures deployment only happens if tests pass

    steps:
      - name: Deploy to Render (Dev)
        if: github.ref == 'refs/heads/dev'
        run: |
          curl -X POST "https://api.render.com/deploy/srv-cuu79md6l47c73acq180?key=${{ secrets.RENDER_API_KEY }}"

      - name: Deploy to Render (Staging)
        if: github.ref == 'refs/heads/staging'
        run: |
          curl -X POST "https://api.render.com/deploy/srv-cuu7a3a3esus73eghor0?key=${{ secrets.RENDER_API_KEY }}"

      - name: Deploy to Render (Prod)
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X POST "https://api.render.com/deploy/srv-cuu7agi3esus73eghtdg?key=${{ secrets.RENDER_API_KEY }}"

  # notify:
  #   name: Slack Notification (on Failure)
  #   runs-on: ubuntu-latest
  #   if: failure()
  #   steps:
  #     - name: Send Slack Alert
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
  #         SLACK_MESSAGE: "ðŸš¨ Deployment failed in branch ${{ github.ref }}!"
